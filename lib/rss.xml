<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[documentation]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>lib/media/favicon.png</url><title>documentation</title><link/></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Tue, 25 Feb 2025 07:34:30 GMT</lastBuildDate><atom:link href="lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Tue, 25 Feb 2025 07:34:29 GMT</pubDate><ttl>60</ttl><dc:creator/><item><title><![CDATA[Inventory GUI]]></title><description><![CDATA[ 
 <br><br>The InventoryGUI is a MarginContainer responsible for managing and displaying inventory slots within a grid-based interface. It supports both vertical and horizontal slot arrangements and handles item selection and navigation.<br><br>
<br>signal item_selected(item_data: InventoryItem)<br>
Emitted when an inventory item is selected.
<br><br>
<br>SLOT_DIRECTION: Dictionary<br>
Defines navigation directions for slots: horizontal (left, right) and vertical (up, down).<br>

<br>INVENTORY_SLOT<br>
Preloaded scene for inventory slots.<br>

<br><br>
<br>@export var starting_slot: InventorySlot<br>
The default slot that receives focus when the inventory opens.<br>

<br>@export var inventory_component: InventoryComponent<br>
The InventoryComponent instance managing inventory data.<br>

<br>@export var select_audio_sfx: AudioStream<br>
Sound effect for selecting items.<br>

<br>@export var accept_audio_sfx: AudioStream<br>
Sound effect for confirming item selection.<br>

<br><br>
<br>func _signal_setup() -&gt; void<br>
Connects signals for handling inventory updates and slot selection.<br>

<br>func _on_item_selected(slot: InventorySlot) -&gt; void<br>
Plays sound effect and emits item_selected when an item is selected.<br>

<br>func create_slot(direction: String) -&gt; InventorySlot<br>
Dynamically creates an inventory slot and assigns proper focus navigation.<br>

<br>func clear_slots() -&gt; void<br>
Removes dynamically added slots and resets the default ones.<br>

<br>func _on_inventory_updated(inventory: Dictionary) -&gt; void<br>
Updates the UI to reflect the current inventory data.<br>

<br>func _on_visibility_changed() -&gt; void<br>
Ensures the starting_slot gets focus when the inventory GUI is shown.<br>

<br>func _on_slot_focus_entered(slot: InventorySlot) -&gt; void<br>
Updates scroll indicators and plays a selection sound effect.<br>

<br>func _ready() -&gt; void<br>
Initialises the inventory GUI and sets up signals.<br>

<br>func _input(_event: InputEvent) -&gt; void<br>
Handles input for opening and navigating the inventory.<br>

<br><br>The InventoryGUI organises items into vertical and horizontal slot groups, dynamically creating slots as needed. It maintains smooth navigation and provides audio feedback for user actions.<br><br>To check if an item is selected in the inventory, listen for the item_selected signal and handle it accordingly.<br><br>var item_selected: bool

func _ready() -&gt; void:
    inventory_gui.item_selected.connect(_on_item_selected)

func _on_item_selected(item: InventoryItem) -&gt; void:
    print("Selected item:", item.item_name)
    if item.item_name != "MyItem":
	    if item_selected: _deselect_item()
		return

func _deselect_item() -&gt; void:
    item_selected = false
<br>This function retrieves the currently focused inventory slot and returns its associated InventoryItem data, if available.<br>]]></description><link>custom-nodes-&amp;-utility-classes/inventory-gui.html</link><guid isPermaLink="false">Custom Nodes &amp; Utility Classes/Inventory GUI.md</guid><pubDate>Mon, 24 Feb 2025 23:23:41 GMT</pubDate></item><item><title><![CDATA[Inventory Item]]></title><description><![CDATA[ 
 <br>The InventoryItem is a Resource that represents an item in the inventory system.<br><br>
<br>@export var icon: Texture<br>
The item's icon texture.<br>

<br>@export var item_name: String<br>
The item's name in the inventory.<br>

<br>@export_multiline var item_description: String<br>
A detailed description of the item.<br>

<br>@export var amount: int<br>
The quantity of the item given upon pickup.<br>

<br>@export_enum("STACKABLE", "UNSTACKABLE", "EQUIPABLE") var type: int<br>
Defines the item type:

<br>0 - Stackable
<br>1 - Unstackable
<br>2 - Equipable


<br>Note

<br>Stackable items increase the amount if they already exist.
<br>Unstackable items are stored in a separate dictionary.
<br>Equipable items are stored under their own category.

<br>Tip
See <a data-tooltip-position="top" aria-label="Inventory Component" data-href="Inventory Component" href="features/inventory-component.html" class="internal-link" target="_self" rel="noopener nofollow">inventory component</a> to learn more
<br>]]></description><link>custom-nodes-&amp;-utility-classes/inventory-item.html</link><guid isPermaLink="false">Custom Nodes &amp; Utility Classes/Inventory Item.md</guid><pubDate>Mon, 24 Feb 2025 23:22:52 GMT</pubDate></item><item><title><![CDATA[Animation Manager]]></title><description><![CDATA[ 
 <br><br>The AnimationManager class is a node that manages animations through an AnimationTree. It provides an interface for playing repeating and one-shot animations, handling animation transitions, and checking animation states.<br><br><br>
<br>Emitted when an animation completes.
<br><br><br>
<br>Defines available animations:

<br>IDLE, WALK, ATTACK, POSE, BIRD, PROUD, THINKING, BUCKET, QUESTION, STEER, CHEER, ROLL


<br>Tip
More animations can be added to this script. These are default override values
<br><br><br>
<br>Maps repeating animations to their respective animation names.
<br>These animations loop continuously.
<br><br>
<br>Maps one-shot animations to their respective animation names.
<br>These animations play once and then stop.
<br><br>
<br>AnimationTree path for handling repeating animations.
<br><br>
<br>Format string for setting one-shot animation requests in the AnimationTree.
<br><br><br>
<br>The AnimationTree instance controlling animations.
<br><br><br>
<br>Ensures anim_tree is assigned.
<br>Connects animation_finished signal from the AnimationTree.
<br><br>
<br>Emits the animation_finished signal when an animation completes.
<br><br>
<br>Sets the requested repeating animation in the AnimationTree.
<br><br>
<br>Sets the requested one-shot animation in the AnimationTree.
<br><br>
<br>Handles both repeating and one-shot animations based on the provided animation.
<br>Logs a warning if the animation type is unknown.
<br><br>
<br>Checks if a one-shot animation is currently playing.
<br>Returns true if the animation is active, otherwise false.
<br><br>
<br>Assign an AnimationTree node to anim_tree.
<br>Call handle_animations(anim) with an Animations enum value to play an animation.
<br>Use is_playing(anim) to check if a one-shot animation is still active.
<br>Connect to the animation_finished signal to respond to completed animations.
<br>This class provides a structured way to manage animations efficiently within a Godot 4 project.<br>]]></description><link>features/animation-manager.html</link><guid isPermaLink="false">Features/Animation Manager.md</guid><pubDate>Mon, 24 Feb 2025 23:28:59 GMT</pubDate></item><item><title><![CDATA[Save System]]></title><description><![CDATA[ 
 <br>Info
This is a plugin created by <a data-tooltip-position="top" aria-label="https://github.com/jhlothamer" rel="noopener nofollow" class="external-link" href="https://github.com/jhlothamer" target="_blank">Jason Lothamer</a>. It replaces the old in-house developed plugin <a data-tooltip-position="top" aria-label="https://github.com/kimbunner/godot_save" rel="noopener nofollow" class="external-link" href="https://github.com/kimbunner/godot_save" target="_blank">Godot Saves Addon</a>.
<br>This maintains game object state (property values) between scene changes as well as saves that state to a file.  It handles the following scenarios for you:<br>
<br>Re-applying property values to game objects when a scene is reloaded.  For example if an object is moved by the player, its position can be maintained so that it is in the new position when the scene is reloaded.
<br>Re-instance a game object that was dynamically added to the scene.  For example if an enemy drops an item and you want it to stay in the game even when the player leaves the scene, the plugin will re-instance this object when that scene is reloaded.  Of course other properties can be persisted too, like the objects position.
<br>Re-free a game object that was freed from the scene.  For example, a quest item is added to a scene at design time in the Godot editor, and so is normally always present.  However, the player can pick up the item which removes the item from the scene tree at runtime.  This plugin will note the fact the item was freed and re-free it when the scene is reloaded.
<br>Share values between scenes.  This is done with a "global" section of the game state data.  This allows something happening in one scene to affect something else in another.  For example, a switch in once scene can set a global value to true which unlocks a door in another scene.
<br>The plugin takes care of all of the above, but if you have special state logic you need to add for a game object, you can hook into the state system by connecting to certain signals (described below).<br><br>This plugin can be installed via the Godot asset library or you can clone or download the repository and copy the addon folder into your game.<br><br>There are two demos available for the plugin.  A very simple demo is in the addons folder (res://addons/game_state_saver/demo/demo_title.tscn) so that is is included when installing from the asset library.  A more complete demo is available in the plugin's GitHub repository.  To get this demo please clone (do not download!) the entire GitHub repository and open its project.<br><br><br>For the game object you wish to save state for, add a GameStateHelper node as a child node.  Then add all of the names of the properties you want to save to the Save Properties array.<br>In the following example, the Player object's global_position and a custom property called facing_direction are saved.<br><img alt="game_state_helper_setup_example.png" src="lib/media/game_state_helper_setup_example.png"><br>If the game object is a dynamically instanced child scene (like a spawned enemy), you will want to check the Dynamic Instance property of the GameStateHelper.<br>In the following example the Bouncer object is set to Dynamic Instance.  This means that when the scene is reloaded, bouncers will be re-instanced and added back into the scene tree.<br><img alt="game_state_helper_dynamic_setup.png" src="lib/media/game_state_helper_dynamic_setup.png"><br>Also note that there is a second GameStateHelper in the above example.  This preserves the Icon's modulate as the bouncer is given a random color.  You can have as many GameStateHelper nodes as needed.<br>If the game state for the object is not specific to a scene and should be the same no matter what scene the object is in, check the Global property of the GameStateHelper.<br>In the following example InventoryMgr is set to global so that the array of inventory items will always be present and the same for every scene.<br><img alt="game_state_helper_global_setup.png" src="lib/media/game_state_helper_global_setup.png"><br><br>Before changing scenes in your game, you must call the GameStateService's on_scene_transitioning() function.  This causes the service to collect all of the game state so the next time the current scene is loaded the game state can be re-applied.<br>For example:<br>GameStateService.on_scene_transitioning()
get_tree().change_scene_to_file("res://path/to/scene.tscn")
<br><br>Not everything can be boiled down to a property value and you may occasionally need to calculate or obtain a value for state with some code.  The GameStateHelper node has two signals that you can use for this called loading_data(data:Dictionary) and saving_data(data:Dictionary).  All you need to do is add entries to the dictionary when saving or access entries when loading in the callback functions connected to these signals.  NOTE: custom data entries may not be present in the dictionary for the loading_data() signal as that signal is emitted before the saving_data() signal.<br><br>Whenever a new game is started, you should call the GameStateService's new_game() function.  This clears the game state.  If this is not done, then game state from previous play sessions will be applied and would cause strange things to happen in the game.<br>For example:<br>   	GameStateService.new_game()<br>
get_tree().change_scene_to_file("res://levels/level1.tscn")<br><br>The GameStateService only stores game state data in memory till its save_game_state() function is called.  All you need to do is pass it a file name.<br>for example:<br>GameStateService.save_game_state("user://saved_gamed/save_game1.json")
<br>Along with the saved game file a ".dat" file is created that contains a hash of the save file.  This hash is checked whenever a saved game is loaded.<br><br>To load a saved game, just call the load_game_state() function of the GameStateService autoload.  If the saved game file is successfully loaded, a path to a scene file is returned, which was the current scene when the save game file was made.<br>For example:<br>var scene_file_path := GameStateService.load_game_state("user://saved_gamed/save_game1.json")
if !scene_file_path: # nothing returned on error - check output
    return
get_tree().change_scene_to_file(scene_file_path)
<br><br><br>Use this node to save property values of its parent node.<br><br>
<br>Save Properties:Array[String] - List of property names of the GameStateHelper's parent node to maintain as game state.
<br>Dynamic Instance - Marks scene as dynamic: it will be re-instanced when the scene it was dynamically added to is re-loaded.
<br>Global - Saved properties will be stored in a global section of game state as apposed to a section for a specific scene.
<br><br>
<br>loading_data(data:Dictionary) - emitted when re-applying saved state.  Custom data entries added when saving data can be accessed, but be sure to check that they are present as loading_data() is emitted before saving_data() is when a scene first loads.
<br>saving_data(data:Dictionary) - emitted when saving state.  Added entries to the data dictionary will be available later when the loading_data() signal is emitted.
<br><br>The autoload that manages game state.<br><br>
<br>dump_game_state() - Creates a JSON file with the raw game state dictionary data.  This is used for debugging.
<br>get_game_state_string(refresh_state:bool) - Returns JSON string of current game state.  Passing in true causes the game state to be updated.
<br>get_global_state_value(key:String) - Gets a value from the global game state.
<br>load_game_state(path: String) -&gt; String - Loads game state data from given file path.  If loading is successful, returns scene path that was current when the save file was created.  Use this path in a call to SceneTree.change_scene_to_file().
<br>new_game() - Resets game state for a new game.
<br>save_game_state(path: String) -&gt; bool - Saves game state to the given file path.  Another file with an md5 hash will be saved along with the file with the extension ".dat".  The hash will be used during load() to detect if the save game file has been altered.
<br>set_global_state_value(key: String, value) - Sets a value from the global game state.
]]></description><link>features/save-system.html</link><guid isPermaLink="false">Features/Save System.md</guid><pubDate>Tue, 25 Feb 2025 07:30:55 GMT</pubDate><enclosure url="lib/media/game_state_helper_setup_example.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="lib/media/game_state_helper_setup_example.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[List of Features]]></title><description><![CDATA[ 
 <br>This page aims to list all the features currently supported by SNS.<br>Note
This section lists features supported by the current stable version of SNS. Some of these features may change or may not be available in future versions of the framework.
Godot <a data-tooltip-position="top" aria-label="https://docs.godotengine.org/en/stable/about/list_of_features.html#list-of-features" rel="noopener nofollow" class="external-link" href="https://docs.godotengine.org/en/stable/about/list_of_features.html#list-of-features" target="_blank">features</a> will not be covered in this list.
<br><br>
<br>
<a data-href="PHOENIX (Progressive Harmonized Optimized Engine for Networked Illumination &amp; Xpression)" href="features/phoenix-(progressive-harmonized-optimized-engine-for-networked-illumination-&amp;-xpression).html" class="internal-link" target="_self" rel="noopener nofollow">PHOENIX (Progressive Harmonized Optimized Engine for Networked Illumination &amp; Xpression)</a> – A custom rendering system designed for optimised lighting, shading, and visual fidelity across environments.

<br>
<a data-href="Day and Night Cycle" href="features/day-and-night-cycle.html" class="internal-link" target="_self" rel="noopener nofollow">Day and Night Cycle</a> – A dynamic system that transitions between different times of day, affecting lighting, shadows, and ambient conditions.

<br>
<a data-href="Ocean Generation System" href="features/ocean-generation-system.html" class="internal-link" target="_self" rel="noopener nofollow">Ocean Generation System</a> – A procedural water system that simulates realistic ocean waves, buoyancy, and interactions with objects.

<br>
<a class="internal-link" data-href="Compass 2D.md" href="features/compass-2d.html" target="_self" rel="noopener nofollow">Compass navigation system</a> – A navigation aid that helps players orient themselves within the game world using cardinal directions and markers.

<br>
Terrain tools – A set of tools for creating, modifying, and optimising terrain, including height maps, textures, and foliage placement.

<br>
<a class="internal-link" data-href="Post Processing.md" href="features/post-processing.html" target="_self" rel="noopener nofollow">Post Processing system</a> – Enhances visual quality using effects like bloom, ambient occlusion, depth of field, and colour grading.

<br><br>
<br>
<a data-tooltip-position="top" aria-label="https://github.com/kcfresh53/Godot-Debug-Camera" rel="noopener nofollow" class="external-link" href="https://github.com/kcfresh53/Godot-Debug-Camera" target="_blank">Debug camera</a> – A free-move camera that allows developers to inspect the game world from any perspective.

<br>
<a data-tooltip-position="top" aria-label="https://github.com/Ratamacue9112/CopperDC/wiki" rel="noopener nofollow" class="external-link" href="https://github.com/Ratamacue9112/CopperDC/wiki" target="_blank">Console command centre</a> – A developer console that executes commands for debugging, testing, and modifying game variables in real time.

<br>
<a data-tooltip-position="top" aria-label="https://github.com/kcfresh53/Godot-Debug-Camera" rel="noopener nofollow" class="external-link" href="https://github.com/kcfresh53/Godot-Debug-Camera" target="_blank">Runtime in-game editor</a> – A system that allows live modifications to game objects, scripts, and variables without restarting the game.

<br>
<a data-tooltip-position="top" aria-label="https://github.com/anthonyec/godot_little_camera_preview" rel="noopener nofollow" class="external-link" href="https://github.com/anthonyec/godot_little_camera_preview" target="_blank">Editor camera previews</a> – Provides real-time previews of different in-game cameras to adjust angles and compositions efficiently.

<br>
<a class="internal-link" data-href="Level Collections.md" href="features/level-collections.html" target="_self" rel="noopener nofollow">Debug level collections</a> – A set of pre-configured test environments for debugging mechanics, AI, and physics.

<br><br>
<br>
<a class="internal-link" data-href="Cutscene Trigger 3D.md" href="features/cutscene-trigger-3d.html" target="_self" rel="noopener nofollow">Cutscene system</a> – A tool for creating and managing in-game cinematics, including camera movements, animations, and <a class="internal-link" data-href="Dialogue Player.md" href="features/dialogue-player.html" target="_self" rel="noopener nofollow">dialogue</a>.

<br>
Character manager – Handles player and NPC entities, including animations, physics, and interactions.

<br>
<a class="internal-link" data-href="State Management.md" href="features/state-management.html" target="_self" rel="noopener nofollow">State management</a> – A framework for defining and transitioning between different character or AI behaviours.

<br>
Move component – A reusable movement system that manages character or object motion in 2D or 3D space.

<br>
Move input component – A component that processes player input and translates it into movement actions.

<br>
Interaction system – Governs how players interact with objects, NPCs, and the environment.

<br>
<a data-tooltip-position="top" aria-label="Inventory Component" data-href="Inventory Component" href="features/inventory-component.html" class="internal-link" target="_self" rel="noopener nofollow">Inventory system</a> – Manages player inventory, including item collection, usage, and storage.

<br>
Stats system – Tracks and updates player or NPC attributes like health, stamina, and experience.

<br>
Audio manager – Controls background music, sound effects, and spatial audio settings.

<br>
Breakable objects – Implements destructible objects with physics-based or scripted breaking mechanics.

<br>
<a data-tooltip-position="top" aria-label="Weather Controller" data-href="Weather Controller" href="features/weather-controller.html" class="internal-link" target="_self" rel="noopener nofollow">Weather systems</a> – Simulates different weather conditions such as rain, fog, and wind, affecting visuals and game-play.

<br>
Scene transition manager – Handles smooth transitions between game scenes, including loading screens and fades.

<br>
<a data-tooltip-position="top" aria-label="Save System" data-href="Save System" href="features/save-system.html" class="internal-link" target="_self" rel="noopener nofollow">Save system</a> - Maintains game object state (property values) between scene changes as well as saves that state to a file

<br><br>
<br>
<a data-tooltip-position="top" aria-label="Inventory GUI" data-href="Inventory GUI" href="custom-nodes-&amp;-utility-classes/inventory-gui.html" class="internal-link" target="_self" rel="noopener nofollow">Inventory GUI manager</a> – Controls the user interface for managing and displaying inventory items.

<br>
Inventory counter – A system for tracking and displaying item quantities in the inventory.

<br>
GUI transition manager – Handles animations and effects for seamless GUI transitions.

<br>
Health container – Displays the player’s health in the form of bars, hearts, or other indicators.

<br>
Interaction prompts – Provides on-screen prompts to guide player interactions with objects and NPCs.

<br>Note
Most of the systems here have documentation in engine using <a data-tooltip-position="top" aria-label="https://docs.godotengine.org/en/stable/tutorials/scripting/gdscript/gdscript_documentation_comments.html" rel="noopener nofollow" class="external-link" href="https://docs.godotengine.org/en/stable/tutorials/scripting/gdscript/gdscript_documentation_comments.html" target="_blank">documentation comments</a>. You can learn more about them by right clicking on a node and selecting "open documentation".
<br>Warning
Engine documentation is still a WIP depreciated methods and functions may have not been marked yet.
<br>]]></description><link>getting-started/list-of-features.html</link><guid isPermaLink="false">Getting Started/List of Features.md</guid><pubDate>Tue, 25 Feb 2025 07:33:43 GMT</pubDate></item><item><title><![CDATA[Dialogue Player]]></title><description><![CDATA[ 
 <br><br>The DialoguePlayer is a Godot 4 class that manages dialogue systems in games. It extends the CanvasLayer node and provides functionality for displaying character dialogue with text animation, character nameplate customisation, and signal-based camera and pose management.<br><br><br>
<br>scene_text_file (String): Path to JSON file containing scene dialogue text
<br>character_json_file (String): Path to JSON file containing character information
<br><br>
<br>selected_text (Array): Array of dialogue lines for current conversation
<br>in_progress (bool): Tracks if dialogue is currently being displayed
<br>text_animating (bool): Tracks if text animation is in progress
<br>should_reveal_text (bool): Flag to control instant text revelation
<br>content: Parsed content from scene text JSON file
<br>character_content: Parsed content from character JSON file
<br>current_dialogue: Currently active dialogue data
<br>current_character: Currently active character data
<br><br>
<br>dialogue_box (TextureRect): Main dialogue box container
<br>dialogue_textbox (RichTextLabel): Text display for dialogue
<br>dialogue_nameplate (TextureRect): Character name display container
<br>name_textbox (RichTextLabel): Text display for character name
<br>text_sound (AudioStreamPlayer): Audio player for text animation sounds
<br><br>
<br>change_cam(camera: String): Emitted when camera change is requested
<br>change_pose(character: String, pose: String): Emitted when character pose change is requested
<br>finished: Emitted when dialogue sequence completes
<br><br><br>func _ready() -&gt; void
func load_scene_text() -&gt; void
<br>
<br>_ready(): Initializes the dialogue system by hiding the dialogue box and loading text files
<br>load_scene_text(): Loads and parses the JSON files for scene text and character data
<br><br>func on_display_dialog(text_key) -&gt; void
func show_text() -&gt; void
func reveal_text() -&gt; void
func next_line() -&gt; void
func finish() -&gt; void
<br>
<br>on_display_dialog(text_key): Main entry point for displaying dialogue. Takes a text key to look up dialogue in JSON
<br>show_text(): Handles text display animation and processing of camera/pose commands
<br>reveal_text(): Instantly reveals all text in the current dialogue box
<br>next_line(): Advances to the next line of dialogue
<br>finish(): Cleans up current dialogue and either ends or moves to next dialogue sequence
<br><br><br>The system supports special commands embedded in dialogue text:<br>
<br>Camera Commands: !(camera_command)!

<br>Triggers camera changes via the change_cam signal


<br>Pose Commands: &lt;(pose_command)&gt;

<br>Triggers character pose changes via the change_pose signal


<br><br>
<br>Characters appear progressively with a 0.02-second delay
<br>Sound effects play every 3 characters
<br>Can be skipped by player input to show full text immediately
<br><br><br>{
    "dialogue_key": {
        "character": "character_id",
        "text": ["array", "of", "dialogue", "lines"],
        "next": "next_dialogue_key"
    }
}
<br><br>{
    "character_id": {
        "name": "Character Name",
        "nameplate_color": "color_value"
    }
}
<br><br># Initialize dialogue
dialogue_player.on_display_dialog("opening_scene")

# Handle dialogue advancement
# Called when player provides input
if Input.is_action_just_pressed("advance_dialogue"):
    dialogue_player.on_display_dialog("current_key")
<br>Note

<br>Text animation can be interrupted by player input
<br>The system automatically handles transitions between dialogue sequences using the "next" field
<br>Camera and pose commands are automatically stripped from displayed text
<br>The dialogue system maintains state to track progress through conversations

]]></description><link>features/dialogue-player.html</link><guid isPermaLink="false">Features/Dialogue Player.md</guid><pubDate>Mon, 24 Feb 2025 17:21:33 GMT</pubDate></item><item><title><![CDATA[Inventory Component]]></title><description><![CDATA[ 
 <br><br>The InventoryComponent is a node that manages an inventory system. It supports stackable, unstackable, and equipable items. The inventory can be global, meaning it is shared across all instances, or local to the specific node.<br><br>
<br>Supports global and local inventories.
<br>Handles stackable, unstackable, and equipable items.
<br>Provides signals for inventory updates.
<br>Automatically merges global inventories when needed.
<br><br><br>Determines if this inventory is global. If true, it shares items with all other instances marked as global.<br><br>A shared inventory dictionary for all global instances.<br><br>The inventory dictionary that holds items. If global is enabled, it returns the global_inventory.<br><br><br>Emitted whenever the inventory is updated.<br><br><br>Initializes the inventory. If global, it merges with the shared global_inventory.<br><br>Syncs the local inventory with the global inventory.<br><br>Triggers the updated signal to notify other nodes of inventory changes.<br><br>Adds an item to the inventory based on its type:<br>Info
To learn more, check out <a data-href="Inventory Item" href="custom-nodes-&amp;-utility-classes/inventory-item.html" class="internal-link" target="_self" rel="noopener nofollow">Inventory Item</a>
<br><br>
<br>item: InventoryItem - The item to be added, which must have the following properties:

<br>icon: Texture - The item's icon.
<br>item_name: String - The name of the item.
<br>amount: int - The quantity of the item.
<br>type: int - The type of item:

<br>0 - Stackable
<br>1 - Unstackable
<br>2 - Equipable




<br><br>The inventory dictionary is structured as follows:<br>{
    "item_name": {
        "icon": Texture,
        "amount": int
    },
    "unstackable": {
        "item_name": {
            "icon": Texture,
            "amount": int
        }
    },
    "equipable": {
        "item_name": {
            "icon": Texture,
            "amount": int
        }
    }
}
<br><br>var inventory = InventoryComponent.new()
inventory.add_item(InventoryItem.new("Sword", some_texture, 1, 1))
<br>This adds a "Sword" to the unstackable inventory category.<br>Note

<br>If global is enabled, all changes apply to global_inventory.
<br>The update() method ensures that any UI elements or logic dependent on inventory updates are notified.

<br>Info
For examples of interacting with the inventory, see <a data-href="Inventory GUI" href="custom-nodes-&amp;-utility-classes/inventory-gui.html" class="internal-link" target="_self" rel="noopener nofollow">Inventory GUI</a>
<br>]]></description><link>features/inventory-component.html</link><guid isPermaLink="false">Features/Inventory Component.md</guid><pubDate>Mon, 24 Feb 2025 17:20:52 GMT</pubDate></item><item><title><![CDATA[Ocean Generation System]]></title><description><![CDATA[ 
 <br><br>The Ocean class is responsible for managing an ocean-like surface in a 3D scene. It dynamically follows an actor while maintaining performance by repositioning itself when the actor moves beyond a defined distance. It also includes options for visual customisation and collision support.<br><br><br>
<br>actor: Node3D

<br>The node that the ocean follows.


<br>lag_speed: float (Range: 0 - 100, Default: 100)

<br>The speed at which the ocean's position updates to catch up with the actor.


<br>snap_distance: float (Range: 100 - 5000, Default: 500)

<br>The distance from the ocean's centre at which it will reposition itself to follow the actor.


<br>ocean_size: float (Range: 0 - 1500, Default: 1500)

<br>The radius of the ocean mesh.
<br>Changing this value updates the ocean's mesh size.


<br>collision: bool (Default: true)

<br>Determines whether the ocean should include a collision shape.


<br><br>
<br>_water: MeshInstance3D

<br>The 3D mesh representing the ocean surface.


<br><br>
<br>OCEAN_MATERIAL

<br>Preloaded material used for rendering the ocean.


<br><br><br>Ensures the ocean properly initialises in the editor.<br><br>
<br>Creates the ocean mesh.
<br>Adds collision if enabled.
<br><br>
<br>Moves the ocean to follow the actor when they move beyond the snap_distance.
<br>Uses linear interpolation (lerp) for smooth repositioning.
<br><br>
<br>Clears and recreates the ocean mesh when ocean_size changes.
<br><br>
<br>Creates and assigns the ocean mesh.
<br><br>
<br>Generates a circular mesh for the ocean surface using SurfaceTool.
<br>Uses UV mapping to support materials.
<br><br>
<br>Generates a WorldBoundaryShape3D collision shape to prevent objects from falling through the ocean.
<br><br>
<br>Attach Ocean to the scene.
<br>Assign an actor (e.g., the player or a boat).
<br>Adjust ocean_size, lag_speed, and snap_distance as needed.
<br>Enable or disable collision depending on game-play requirements.
<br>Note

<br>The ocean does not handle water physics or buoyancy.
<br>The lag_speed value affects the smoothness of ocean repositioning.
<br>The collision system is simplistic and meant primarily for world boundaries.

]]></description><link>features/ocean-generation-system.html</link><guid isPermaLink="false">Features/Ocean Generation System.md</guid><pubDate>Mon, 24 Feb 2025 17:18:45 GMT</pubDate></item><item><title><![CDATA[Post Processing]]></title><description><![CDATA[ 
 <br><br>
<br>Custom CanvasLayer node, "PostProcess".
<br>2D/3D support.
<br>Custom resource type to save preset configurations, "PostProcessPreset".
<br>Ability to dynamically modify effects through code.
<br><br>
<br>ASCII (Monochromatic / Render everything as ASCII text) (for now uses only: .:-+*=%@#).
<br>Chromatic Aberration
<br>Blur
<br>Vignette
<br>Glitch (Animated)
<br>Outline (Not the best implementation, still being worked on).
<br>Screen Shake
<br>Analog Monitor
<br>Grain (Animated)
<br>Circular Waves / Speed Lines (Low Quality, still being worked on).
<br>Fish eye effect.
<br>CRT/VHS
<br><br>Simply add the custom PostProcess node to the scene tree directly or through code. Set the "Configuration" property of the PostProcess to a PostProcessPreset (either pre-made or instantiated on-the-spot) and run the game. The add-on uses some simple "Screen Space" shaders to apply the desired effects.<br><img alt="image" src="lib/media/image.png"> <br><br>
<img alt="image" src="lib/media/image-1.png"> <br><br>
<img alt="image" src="lib/media/image-2.png"> <br><br><br><img alt="image" src="lib/media/image-3.png"><br><br><img alt="image" src="lib/media/image-4.png"><br><br>All values can be modified during runtime and the changes will be applied immediately. This applies to on/off states as well as numbered parameters. All effects can be applied in parallel and work together well.<br>(NOTE: Effects are applied on rendering layers: 99-120, so i suggest putting UI above 120 and anything else like player, world etc. under 99!)<br><br>In this example, we enable/disable ScreenShake!<br>extends Node3D

func _process(_delta) -&gt; void:
    # Check if Screen Shake is enabled
    if $PostProcess.configuration.ScreenShake:
        # Change the Screen Shake Power by 0.1 each frame
        $PostProcess.configuration.ScreenShakePower += 0.1
    
        # if Screen Shake Power is bigger than 2, change it back to 0!
        if $PostProcess.configuration.ScreenShakePower &gt;= 2:
            $PostProcess.configuration.ScreenShakePower = 0

    # if key T is pressed, Toggle Screen Shake
    if Input.is_key_pressed(KEY_T):
        if $PostProcess.configuration.ScreenShake:
            $PostProcess.configuration.ScreenShake = false
        else:
            $PostProcess.configuration.ScreenShake = true

<br>This also works with other effects like:<br>
ASCII, Blur, ChromaticAberration, FishEye, etc...<br>Note
This feature was forked from <a rel="noopener nofollow" class="external-link" href="https://github.com/ItsKorin/Godot-Post-Process-Plugin/tree/main" target="_blank">https://github.com/ItsKorin/Godot-Post-Process-Plugin/tree/main</a> and has been modified for this projects needs future changes and fixes will be pushed upstream.
]]></description><link>features/post-processing.html</link><guid isPermaLink="false">Features/Post Processing.md</guid><pubDate>Mon, 24 Feb 2025 17:19:07 GMT</pubDate><enclosure url="lib/media/image.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="lib/media/image.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[SNS Framework Docs - 1.1 branch]]></title><description><![CDATA[ 
 <br><img alt="Icarus_Logo.png" src="resources/icarus_logo.png"><br><br>Welcome to the official documentation of the <a data-tooltip-position="top" aria-label="https://github.com/kcfresh53/sword-and-sail" rel="noopener nofollow" class="external-link" href="https://github.com/kcfresh53/sword-and-sail" target="_blank">SNS framework</a>, a game development framework built in the <a data-tooltip-position="top" aria-label="https://godotengine.org/" rel="noopener nofollow" class="external-link" href="https://godotengine.org/" target="_blank">Godot Engine</a>. We recommend that you read the <a class="internal-link" data-href="#introduction" href="about:blank#introduction" target="_self" rel="noopener nofollow">introduction</a> section to get an overview of what this documentation has to offer.<br>The table of contents below should let you easily access the documentation for your topic of interest.<br><br>
<br><a data-href="Introduction" href="getting-started/introduction.html" class="internal-link" target="_self" rel="noopener nofollow">Introduction</a>
<br><a data-tooltip-position="top" aria-label="List of Features" data-href="List of Features" href="getting-started/list-of-features.html" class="internal-link" target="_self" rel="noopener nofollow">List of features</a>
<br><a data-tooltip-position="top" aria-label="Project Structure" data-href="Project Structure" href="getting-started/project-structure.html" class="internal-link" target="_self" rel="noopener nofollow">Project structure</a>
<br><a data-tooltip-position="top" aria-label="Best Practices" data-href="Best Practices" href="getting-started/best-practices.html" class="internal-link" target="_self" rel="noopener nofollow">Best practices</a>
<br><a data-tooltip-position="top" aria-label="Frequently Asked Questions" data-href="Frequently Asked Questions" href="getting-started/frequently-asked-questions.html" class="internal-link" target="_self" rel="noopener nofollow">FAQ</a>
<br>Warning
This documentation is a WIP and may be missing important details.
<br>]]></description><link>index.html</link><guid isPermaLink="false">Index.md</guid><pubDate>Mon, 24 Feb 2025 17:26:24 GMT</pubDate><enclosure url="resources/icarus_logo.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="resources/icarus_logo.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Compass 2D]]></title><description><![CDATA[ 
 <br><br>The Compass System is a Godot 4 node that provides a navigational compass for both 2D and 3D modes. It tracks Points of Interest (POI) and dynamically updates pin positions based on the player's direction and distance.<br><br><br>
<br>@export_range(-180, 180) var north: int = 0

<br>Defines the north offset in degrees.


<br>@export_enum("3D", "2D") var mode: String = "3D"

<br>Determines whether the compass operates in 3D or 2D mode.


<br>@export var parent: Node

<br>The node that the compass follows.


<br>@export var parent_property_for_current_direction: String = "global_rotation"

<br>The property used to determine the parent’s current direction.


<br><br>
<br>@export var custom_container_resource: Texture

<br>Custom texture for the compass container.


<br>@export var custom_needle_resource: Texture

<br>Custom texture for the compass needle.


<br><br>
<br>@export_range(0.01, 0.5) var _lerp_speed: float = 0.1

<br>Lerp speed for smooth rotation updates.


<br>@export var rotate_container: bool = false

<br>Whether the entire container rotates instead of just the needle.


<br><br>
<br>@export var POI: Array[Node]

<br>List of Points of Interest to track.


<br>@export var PINS: Array[Texture]

<br>List of pin textures to be used for POIs.


<br>@export var pin_radius: float = 100.0

<br>The radius at which pins are positioned around the compass.


<br><br>
<br>@export var max_distance: float = 1000.0

<br>Maximum distance at which a pin remains visible.


<br>@export var min_scale: float = 0.5

<br>Minimum scale for distant pins.


<br>@export var min_opacity: float = 0.3

<br>Minimum opacity when facing away from the POI.


<br><br><br>
<br>Initializes the compass, setting up the container and needle sprites.
<br><br>
<br>Checks for a valid parent node and sets up POI pins.
<br><br>
<br>Initializes pin sprites for each POI.
<br><br>
<br>Updates the compass rotation and pin positions based on the parent’s direction.
<br><br>
<br>Retrieves the parent’s current rotation based on the selected mode (2D or 3D).
<br><br>
<br>Updates the compass needle or container rotation smoothly.
<br><br>
<br>Positions pins around the compass based on direction, distance, and facing angle.
<br><br>
<br>Updates the container texture dynamically.
<br><br>
<br>Updates the needle texture dynamically.
<br><br>
<br>Attach the Compass node to the scene.
<br>Set the parent property to the player or camera node.
<br>Add POIs to the POI array.
<br>Assign appropriate textures to PINS.
<br>Adjust settings like max_distance, min_scale, and rotate_container for desired behavior.
<br>The compass will automatically update in real-time based on player movement and orientation.
<br>This system provides a flexible and dynamic way to integrate a navigational compass in both 2D and 3D environments within a Godot 4 project.]]></description><link>features/compass-2d.html</link><guid isPermaLink="false">Features/Compass 2D.md</guid><pubDate>Sun, 23 Feb 2025 21:27:10 GMT</pubDate></item><item><title><![CDATA[Cutscene Trigger 3D]]></title><description><![CDATA[ 
 <br><br>The CutSceneTrigger3D class is a trigger area in a scene that manages in-game cutscenes, handling camera transitions, character animations, and dialogue display.<br><br><br>
<br>List of camera viewpoints used in the cutscene.
<br><br>
<br>Characters involved in the cutscene.
<br><br>
<br>Reference to <a data-href="Dialogue Player" href="features/dialogue-player.html" class="internal-link" target="_self" rel="noopener nofollow">Dialogue Player</a> node.
<br><br>
<br>The dialogue content for the cutscene.
<br><br>
<br>Determines whether the trigger should be removed after the cutscene completes.
<br><br><br>
<br>Connects signals to handle player entry, exit, dialogue progression, and camera changes.
<br><br>
<br>Listens for input to progress dialogue during an active cutscene.
<br><br>
<br>Triggers the cutscene when the player enters the area.
<br><br>
<br>Prevents the cutscene from starting if the player exits the area before triggering it.
<br><br>
<br>Switches to the first cutscene camera and starts dialogue.
<br><br>
<br>Restores the player's camera and resets character animations.
<br>Optionally removes the trigger if delete_on_complete is true.
<br><br>
<br>Changes the camera to a specified viewpoint based on dialogue events.
<br><br>
<br>Updates a character’s pose during the cutscene.
<br><br>
<br>Retrieves the index of a camera in the global camera list.
<br><br>
<br>Assign cameras, characters, and a DialoguePlayer to the CutSceneTrigger3D.
<br>Configure display_dialogue with the dialogue content.
<br>Set delete_on_complete to true if the trigger should remove itself after use.
<br>Ensure characters have a CharacterCutscene node for pose management.
<br>Use CameraManager to manage camera transitions within the cutscene.
<br>This class provides an interactive way to trigger and manage cutscenes dynamically in a Godot 4 game project.]]></description><link>features/cutscene-trigger-3d.html</link><guid isPermaLink="false">Features/Cutscene Trigger 3D.md</guid><pubDate>Sun, 23 Feb 2025 21:52:52 GMT</pubDate></item><item><title><![CDATA[Day and Night Cycle]]></title><description><![CDATA[ 
 <br><br>The DayNightCycle class is a node that manages a simple day-night cycle using a DirectionalLight3D and WorldEnvironment. It allows for real-time progression of time, smooth transitions between day and night, and adjustable fog effects. This script is designed to be used both in the editor (@tool) and at runtime.<br><br><br>
<br>Default: true
<br>Determines whether the cycle should use a global time system.
<br><br>
<br>Default: true
<br>If false, the time will not progress.
<br><br>
<br>Default: false
<br>Controls whether the scene should have a foggy appearance.
<br>Setting this property calls _set_scene_fog() if the node is ready.
<br><br>
<br>Default: 1.0
<br>Defines the speed at which time progresses, in degrees per second.
<br>A full cycle (360 degrees) takes 6 real-world minutes.
<br><br>
<br>Default: 0.0
<br>Range: 0 - 360
<br>Represents the current time in degrees of the day-night cycle.
<br>Automatically updates the rotation of the DirectionalLight3D when changed.
<br>Uses fmod to ensure values stay within the range.
<br><br><br>
<br>Emitted whenever current_time is updated.
<br><br>
<br>Emitted when transitioning into night.
<br><br>
<br>Emitted when transitioning into day.
<br><br><br>
<br>Path: $DirectionalLight3D
<br>Controls the main light source for the scene.
<br><br>
<br>Path: $WorldEnvironment
<br>Used to modify environmental properties such as fog color.
<br><br><br>
<br>Initializes the directional light's rotation and determines if it's currently night.
<br>Calls _set_scene_fog() to apply initial fog settings.
<br><br>
<br>Updates time progression each frame unless change_time is false or in the editor.
<br>Calls _update_time(delta) to increment time.
<br><br>
<br>Advances current_time based on cycle_rate and delta.
<br>Updates fog color dynamically.
<br><br>
<br>Sets the initial fog color based on whether foggy is true or false.
<br><br>
<br>Smoothly transitions fog color between day and night based on current_time.
<br><br>
<br>Emits time_changed signal with the current time.
<br>Determines if a transition between day and night occurred and emits time_changed_night or time_changed_day accordingly.
<br><br>
<br>Forces the emission of day/night transition signals based on current_time.
<br>Prints debug information about the current and previous states.
<br><br>
<br>Add the DayNightCycle node to your scene.
<br>Ensure that DirectionalLight3D and WorldEnvironment are present as child nodes.
<br>Adjust properties like cycle_rate, foggy, and current_time as needed.
<br>Connect signals (time_changed, time_changed_night, time_changed_day) to react to time changes in your game logic.
<br>This system provides a dynamic way to simulate time transitions in a Godot 4 environment, making it useful for open-world games, simulation experiences, and atmospheric effects.]]></description><link>features/day-and-night-cycle.html</link><guid isPermaLink="false">Features/Day and Night Cycle.md</guid><pubDate>Sun, 23 Feb 2025 21:43:25 GMT</pubDate></item><item><title><![CDATA[Level Collections]]></title><description><![CDATA[ 
 <br><br>The LevelCollection class is a Godot 4 Resource used to manage a collection of level scene files. It provides functionality for retrieving levels by name.<br><br><br>
<br>An array of level scene file paths stored as strings.
<br>Will be changed to a typed dictionary in Godot 4.4.
<br><br><br>
<br>Searches for a level by name within the levels array.
<br>Returns the file path of the matching level if found.
<br>Logs an error using DebugConsole.log_error("Invalid level name") if no matching level is found.
<br>Returns an empty string ("") if the level is not found.
<br><br>
<br>Assign level scene file paths to the levels array.
<br>Call get_level(level_name) to retrieve a level’s file path by its name.
<br>Ensure that the level names match the scene file names (excluding the .tscn extension).
<br>Check for an empty return value to handle invalid level names properly.
<br>This class provides a simple way to manage and retrieve level scenes dynamically within a Godot 4 project.]]></description><link>features/level-collections.html</link><guid isPermaLink="false">Features/Level Collections.md</guid><pubDate>Sun, 23 Feb 2025 21:12:28 GMT</pubDate></item><item><title><![CDATA[PHOENIX (Progressive Harmonized Optimized Engine for Networked Illumination & Xpression)]]></title><description><![CDATA[ 
 ]]></description><link>features/phoenix-(progressive-harmonized-optimized-engine-for-networked-illumination-&amp;-xpression).html</link><guid isPermaLink="false">Features/PHOENIX (Progressive Harmonized Optimized Engine for Networked Illumination &amp; Xpression).md</guid><pubDate>Sun, 23 Feb 2025 20:36:31 GMT</pubDate></item><item><title><![CDATA[State Management]]></title><description><![CDATA[ 
 <br><br>The StateMachine and State classes provide a modular system for managing game states in a Godot 4 project. The StateMachine handles transitions between different states, while individual states inherit from the State class to define specific behaviors.<br><br><br><br><br>
<br>The starting state when the StateMachine is initialized.
<br><br>
<br>The currently active state.
<br><br>
<br>A dictionary that maps state names to their respective State instances.
<br><br><br><br>
<br>Collects all child nodes that inherit from State and stores them in the states dictionary.
<br>Connects the Transitioned signal of each state to handle state transitions.
<br>Initializes the current_state as initial_state if provided.
<br><br>
<br>Calls the Update(delta) method of the current state.
<br><br>
<br>Calls the Physics_Update(delta) method of the current state.
<br><br>
<br>Handles state transitions when a State emits the Transitioned signal.
<br>Ensures that transitions occur only from the active state.
<br>Calls Exit() on the current state and Enter() on the new state.
<br><br><br><br><br>
<br>Emitted when a state wants to transition to another state.
<br><br><br><br>
<br>Called when the state becomes active. Override this method in sub-classes to define entry behaviour.
<br><br>
<br>Called when transitioning away from this state. Override this method in subclasses to define exit behaviour.
<br><br>
<br>Called every frame while this state is active. Override this method in subclasses for per-frame logic.
<br><br>
<br>Called every physics frame while this state is active. Override this method in subclasses for physics-based logic.
<br><br><br>
<br>Create a StateMachine node and add it as a child to the relevant game object.
<br>Create multiple State nodes as children of StateMachine.
<br>Set one of the states as the initial_state.
<br>Implement custom behaviours inside the Enter(), Exit(), Update(), and Physics_Update() methods of each state.
<br>Use emit_signal("Transitioned", "NewStateName") inside a state to trigger a transition.
<br>This system allows for organised, modular, and scalable state-driven behaviours in a Godot project.]]></description><link>features/state-management.html</link><guid isPermaLink="false">Features/State Management.md</guid><pubDate>Sun, 23 Feb 2025 22:12:48 GMT</pubDate></item><item><title><![CDATA[Weather Controller]]></title><description><![CDATA[ 
 <br><br>The WeatherController class is responsible for managing weather effects such as fog, rain, and lightning. It smoothly follows the player's position and interacts with the DayNightCycle system.<br><br><br>
<br>@export var actor: Node3D

<br>The player or entity that the weather visuals will follow.


<br>@export var day_night_cycle: DayNightCycle

<br>Reference to the day/night cycle system.


<br>@export var lag_speed: float = 10.0

<br>The interpolation speed at which the weather visuals catch up to the actor.


<br><br>
<br>@export var foggy: bool

<br>Enables or disables fog.
<br>Automatically updates fog effects when changed.


<br>@export var rain: bool

<br>Enables or disables rain.
<br>Automatically updates rain effects when changed.


<br>@export var lightning: bool

<br>Enables or disables lightning strikes.
<br>If enabled, starts triggering lightning strikes at random intervals.
<br>Stops lightning effects when disabled.


<br>@export var lightning_randomness: float = 60

<br>Maximum delay in seconds between lightning strikes.


<br>@export var lightning_strike_length: float = 0.5

<br>Duration of a lightning strike.


<br>@export var visible_overcast_clouds: bool = true

<br>Toggles visibility of overcast clouds.


<br>@export_range(0, 1, 0.1) var overcast_cloud_opacity: float = 1

<br>Adjusts the opacity of overcast clouds.


<br><br>
<br>@onready var visuals: Node3D

<br>The parent node containing all weather visuals.


<br>@onready var gpu_particles_3d: GPUParticles3D

<br>Particle system used for rain effects.


<br>@onready var fog_volume: FogVolume

<br>Node that handles fog rendering.


<br>@onready var rain_audio_manager: AudioManager

<br>Manages audio for rain effects.


<br>@onready var overcast_clouds: MeshInstance3D

<br>Represents the overcast cloud layer.


<br>@onready var lightning_volume: MeshInstance3D

<br>Handles the visibility of lightning flashes.


<br>@onready var lightning_timer: Timer

<br>Timer used to randomly trigger lightning strikes.


<br>@onready var lightning_audio_fx: AudioStreamPlayer

<br>Plays lightning sound effects.


<br><br><br>
<br>Initialises weather effects.
<br>Ensures rain, fog, and overcast clouds reflect the initial settings.
<br><br>
<br>Updates the position of weather visuals to smoothly follow the actor.
<br><br>
<br>Enables/disables rain particle effects and audio.
<br><br>
<br>Adjusts cloud opacity based on overcast_cloud_opacity.
<br><br>
<br>Enables/disables fog effects and synchronizes with the day/night cycle.
<br><br>
<br>Starts the lightning timer to trigger strikes at random intervals.
<br><br>
<br>Activates a lightning strike, plays sound, and hides the effect after a short duration.
<br><br>
<br>Assign an actor (usually the player) to the WeatherController.
<br>Enable or disable different weather effects as needed.
<br>Adjust settings such as lightning_randomness and overcast_cloud_opacity for finer control.
<br>The weather visuals will automatically follow the actor and update dynamically.
<br><br>This class integrates with the <a class="internal-link" data-href="Day and Night Cycle.md" href="features/day-and-night-cycle.html" target="_self" rel="noopener nofollow"><code></code></a>DayNightCycle and provides a dynamic, immersive weather system in your game.]]></description><link>features/weather-controller.html</link><guid isPermaLink="false">Features/Weather Controller.md</guid><pubDate>Sun, 23 Feb 2025 22:12:56 GMT</pubDate></item><item><title><![CDATA[Best Practices]]></title><description><![CDATA[ 
 <br>This project mostly adheres to the best practices laid out in the Godot Engine <a data-tooltip-position="top" aria-label="https://docs.godotengine.org/en/stable/tutorials/best_practices/index.html" rel="noopener nofollow" class="external-link" href="https://docs.godotengine.org/en/stable/tutorials/best_practices/index.html" target="_blank">documentation</a>. However, we have a few additions.<br>
<br>
Use a Component-Based Programming Paradigm
The SNS framework follows a component-based programming paradigm, where game objects are built from smaller, reusable components rather than relying on deep inheritance trees. This approach promotes modularity, making it easier to extend functionality, reuse components across different objects, and improve maintainability.
Why use this approach?

<br>
Reduces code duplication by separating behaviours into independent components.

<br>
Encourages reusability, as components can be attached to multiple objects.

<br>
Simplifies debugging by isolating functionality into smaller, manageable scripts.


(For further reading, see <a data-tooltip-position="top" aria-label="https://en.wikipedia.org/wiki/Entity_component_system" rel="noopener nofollow" class="external-link" href="https://en.wikipedia.org/wiki/Entity_component_system" target="_blank">Entity-Component-System (ECS)</a> design patterns in game development.)

<br>
Use a World Template for Level Creation<br>
Every level should inherit from a world template scene. This ensures consistency in level structure and provides an optimal layout for: 

<br>
Node communication – Predefined node paths allow different gameplay systems to interact seamlessly. 

<br>
Scene optimisation – Reduces unnecessary reloading of common assets and structures. 

<br>
Scalability – New levels can be easily built upon an existing foundation without redundant setup. 



<br>
Assign Audio Players to the Correct Audio Bus<br>
Always assign audio players to the appropriate audio bus layer to ensure proper sound mixing, effects processing, and volume control. See the image below for available audio channels and their intended use. 
<img alt="Audio bus screenshot" src="lib/media/audio_bus.png">
This maintains a structured soundscape and avoids audio conflicts. 

<br>
Maintain a Consistent Node Hierarchy in Scenes<br>
When creating a new scene, nodes should be structured in the following order for clarity and efficiency:
   BaseNode/
   ├── CanvasLayer/   # UI and HUD elements
   ├── Collision/     # Collision shapes and physics bodies
   ├── Visuals/       # Sprites, meshes, and visual effects
   ├── Audio/         # Sound effects and background music players
   ├── Camera/        # Camera nodes and tracking systems
   ├── Management/    # Scripts handling logic and scene interactions
   ├── FSM/           # Finite State Machine nodes for state-based behaviors

Following this structure ensures that each scene remains organised and that different systems (UI, physics, visuals, and logic) remain neatly separated.
By following these best practices, we ensure a maintainable, scalable, and efficient project structure.

<br>]]></description><link>getting-started/best-practices.html</link><guid isPermaLink="false">Getting Started/Best Practices.md</guid><pubDate>Mon, 24 Feb 2025 02:41:32 GMT</pubDate><enclosure url="lib/media/audio_bus.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="lib/media/audio_bus.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Frequently Asked Questions]]></title><description><![CDATA[ 
 <br>For Godot related questions, we recommend you make reference of the Godot Engine <a data-tooltip-position="top" aria-label="https://docs.godotengine.org/en/stable/about/faq.html" rel="noopener nofollow" class="external-link" href="https://docs.godotengine.org/en/stable/about/faq.html" target="_blank">FAQ</a>.<br><br>You can now reference the <a class="internal-link" data-href="Getting Started/Project Structure" href="getting-started/project-structure.html" target="_self" rel="noopener nofollow">Project structure</a> section of the documentation.<br><br>They were copied over from an alpha version of the framework and were named incorrectly. This issue was only caught months later when dependencies were already built around the components.<br><br>You can now reference the <a class="internal-link" data-href="Getting Started/Project Structure" href="getting-started/project-structure.html" target="_self" rel="noopener nofollow">Project structure</a> section of the documentation.<br><br>Short answer: <a data-tooltip-position="top" aria-label="https://docs.godotengine.org/en/stable/about/faq.html" rel="noopener nofollow" class="external-link" href="https://docs.godotengine.org/en/stable/about/faq.html" target="_blank">FAQ</a>.<br>Long answer: We believe in free and open source software. Godot is a tool made and used by game developers which makes it easy to focus on game development rather than fighting the tool you are working with.<br>]]></description><link>getting-started/frequently-asked-questions.html</link><guid isPermaLink="false">Getting Started/Frequently Asked Questions.md</guid><pubDate>Mon, 24 Feb 2025 02:41:40 GMT</pubDate></item><item><title><![CDATA[Introduction]]></title><description><![CDATA[ 
 <br>Welcome to the official documentation of the <a data-tooltip-position="top" aria-label="https://github.com/kcfresh53/sword-and-sail" rel="noopener nofollow" class="external-link" href="https://github.com/kcfresh53/sword-and-sail" target="_blank">SNS framework</a>, a game development framework built in the <a data-tooltip-position="top" aria-label="https://godotengine.org/" rel="noopener nofollow" class="external-link" href="https://godotengine.org/" target="_blank">Godot Engine</a>. The SNS framework was developed for the Sword and Sail game, but it quickly became a complex super-set of the Godot Engine, providing several tools for making complex narrative driven 3D games.<br><br>Using this framework requires prerequisite knowledge in Godot 4.3. There is a wealth of <a data-tooltip-position="top" aria-label="https://docs.godotengine.org/en/stable/community/tutorials.html#doc-community-tutorials" rel="noopener nofollow" class="external-link" href="https://docs.godotengine.org/en/stable/community/tutorials.html#doc-community-tutorials" target="_blank">Tutorials and resources</a> provided by the engines official <a data-tooltip-position="top" aria-label="https://docs.godotengine.org/en/stable" rel="noopener nofollow" class="external-link" href="https://docs.godotengine.org/en/stable" target="_blank">Documentation</a> that we recommend as a starting point.<br>In case you have trouble with one of the tutorials or your project, you can find help on our <a data-tooltip-position="top" aria-label="https://discord.gg/erCU6Rhm" rel="noopener nofollow" class="external-link" href="https://discord.gg/erCU6Rhm" target="_blank">Discord</a> server, various <a data-tooltip-position="top" aria-label="https://godotengine.org/community/" rel="noopener nofollow" class="external-link" href="https://godotengine.org/community/" target="_blank">Community channels</a>, the Godot <a data-tooltip-position="top" aria-label="https://discord.gg/godotengine" rel="noopener nofollow" class="external-link" href="https://discord.gg/godotengine" target="_blank">Discord</a> community and <a data-tooltip-position="top" aria-label="https://forum.godotengine.org/" rel="noopener nofollow" class="external-link" href="https://forum.godotengine.org/" target="_blank">Forum.</a><br>]]></description><link>getting-started/introduction.html</link><guid isPermaLink="false">Getting Started/Introduction.md</guid><pubDate>Mon, 24 Feb 2025 03:05:24 GMT</pubDate></item><item><title><![CDATA[Project Structure]]></title><description><![CDATA[ 
 <br>This page will cover the project configuration, file system, collision layers and naming conventions.<br><br>A project will always have the following file structure:<br>res/
├── addons/
├── assets/
│   ├── audio/
│   ├── fonts/
│   ├── materials/
│   ├── meshlibrary/
│   ├── models/
│   ├── textures/
│   │   ├── environment/
│   │   ├── GUI/
│   │   ├── icons/
│   │   ├── noise/
│   │   ├── particles/
├── dialogue/
│   ├── json/
├── documentation/
├── scenes/
│   ├── cutscenes/
│   ├── entities/
│   ├── GUI/
│   ├── levels/
│   ├── objects/
│   ├── templates/
│   ├── utility/
├── scripts/
│   ├── components/
│   │   ├── 2D/
│   │   ├── 3D/
│   │   ├── Node/
│   ├── gameplay/
│   │   ├── entities/
│   │   ├── GUI/
│   │   ├── objects/
│   │   ├── states/
│   ├── resource/
│   ├── utility/
├── script_templates/
│   ├── state/
<br>
<br>
addons/<br>
This directory is for any third-party or custom plugins that extend Godot's functionality. These could include editor tools, script extensions, or custom nodes that enhance the engine’s capabilities.

<br>
assets/<br>
This folder contains all media files used in the project. It is further divided into:

<br>audio/ – Stores sound effects, background music, and voice lines.
<br>fonts/ – Holds custom fonts for UI and text elements.
<br>materials/ – Contains material and shader files for defining surface properties.
<br>meshlibrary/ – Stores pre-configured mesh assets for use in 3D environments.
<br>models/ – Contains 3D model files such as .glb, .blend, or .gltf.
<br>textures/ – Organizes various texture assets into subcategories:

<br>environment/ – Skyboxes, terrain textures, and other environmental visuals.
<br>GUI/ – UI-related textures such as buttons and panels.
<br>icons/ – Icons for the game or editor tools.
<br>noise/ – Noise textures used for procedural generation.
<br>particles/ – Textures specifically used for particle effects.




<br>
dialogue/<br>
This folder is meant for storing narrative and dialogue data.

<br>json/ – Contains structured dialogue data, in JSON format, for use with the dialogue system.


<br>
documentation/<br>
A dedicated space for project documentation, including developer guides, API references, and setup instructions. This may include Markdown files or HTML documentation.

<br>
scenes/<br>
Organizes all .tscn scene files in a structured manner:

<br>cutscenes/ – Predefined cinematics and scripted events.
<br>entities/ – Player characters, NPCs, and other interactive game entities.
<br>GUI/ – User interface scenes like menus, HUDs, and in-game overlays.
<br>levels/ – Main game levels and environments.
<br>objects/ – Common scene objects such as doors, platforms, or props.
<br>templates/ – Scene templates that can be reused as prefabs.
<br>utility/ – Helper scenes or tools used across the game.


<br>
scripts/<br>
Contains all scripts that define gameplay mechanics and engine interactions:

<br>components/ – Script components categorized into:

<br>2D/ – Scripts related to 2D gameplay elements.
<br>3D/ – Scripts for 3D objects and mechanics.
<br>Node/ – Generic scripts that extend Godot’s node system.


<br>gameplay/ – Handles core gameplay logic, including:

<br>entities/ – AI behavior, player movement, and enemy logic.
<br>GUI/ – UI interactions and animations.
<br>objects/ – Scripts for interactable or environmental objects.
<br>states/ – State machine logic for AI and gameplay mechanics.


<br>resource/ – Scripts for handling resources like inventory systems or database interactions.
<br>utility/ – General-purpose helper scripts such as math utilities, debugging tools, and file management.


<br>
script_templates/<br>
Stores reusable script templates for quick implementation.

<br>state/ – Templates for finite state machines or behavior trees.


<br><br>Directories and files should always make use of the <a data-tooltip-position="top" aria-label="https://en.wikipedia.org/wiki/Snake_case" rel="noopener nofollow" class="external-link" href="https://en.wikipedia.org/wiki/Snake_case" target="_blank">snakecase</a> naming convention with the following exceptions:<br>
<br>
Script template sub directories and files

<br>
Directories named after acronyms

<br>
Core components

<br>
Utility files

<br>
Globals

<br>Any directories or files that fall under these categories should be named using <a data-tooltip-position="top" aria-label="https://www.theserverside.com/definition/Pascal-case" rel="noopener nofollow" class="external-link" href="https://www.theserverside.com/definition/Pascal-case" target="_blank">PascalCase</a>.<br><br>
Note:<br>
The hitbox and hurtbox definitions are swapped in the current version of the framework and will be changed in the future.
<br>The SNS framework makes use of 12 collision layers:<br>
<br>
world - Represents static level geometry such as floors, walls, and obstacles. This is the primary layer for environment collisions.

<br>
entity - Used for characters, NPCs, and other dynamic entities that interact with the world and each other.

<br>
hitbox - Defines attack or damage-dealing areas, typically used for weapons, projectiles, or melee strikes.

<br>
hurtbox - Represents areas of entities that can take damage when colliding with a hitbox. This allows precise hit detection.

<br>
pickup - Covers collectible items such as power-ups, ammo, or currency that players or entities can interact with.

<br>
sailwind - Used for wind-based mechanics or sailing interactions, possibly affecting boats, sails, or wind-driven objects.

<br>
target - Defines objects that can be locked onto, aimed at, or tracked by AI or player mechanics.

<br>
interactable - Covers objects that players or NPCs can interact with, such as doors, switches, or levers.

<br>
hookpoint - Represents points where a grappling hook or tethering mechanic can attach, useful for climbing, swinging, or traversal.

<br>
explodable - Marks objects that can be destroyed or triggered by explosions, such as barrels, walls, or destructible cover.

<br>
hook - Defines the grappling hook itself or similar tethering mechanics that interact with hookpoints.

<br>
cutscene - Used for elements that should only be active during cutscenes, ensuring they don’t interfere with regular gameplay physics or interactions.

<br><img alt="Collision  layers screenshot" src="lib/media/collision.png"><br>]]></description><link>getting-started/project-structure.html</link><guid isPermaLink="false">Getting Started/Project Structure.md</guid><pubDate>Mon, 24 Feb 2025 03:09:06 GMT</pubDate><enclosure url="lib/media/collision.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="lib/media/collision.png"&gt;&lt;/figure&gt;</content:encoded></item></channel></rss>